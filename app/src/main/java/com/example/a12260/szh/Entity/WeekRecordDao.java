package com.example.a12260.szh.Entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WEEK_RECORD".
*/
public class WeekRecordDao extends AbstractDao<WeekRecord, Void> {

    public static final String TABLENAME = "WEEK_RECORD";

    /**
     * Properties of entity WeekRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Timestamp = new Property(0, Long.class, "timestamp", false, "TIMESTAMP");
        public final static Property PackageName = new Property(1, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property TimeSpent = new Property(2, Long.class, "timeSpent", false, "TIME_SPENT");
    }


    public WeekRecordDao(DaoConfig config) {
        super(config);
    }
    
    public WeekRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WEEK_RECORD\" (" + //
                "\"TIMESTAMP\" INTEGER," + // 0: timestamp
                "\"PACKAGE_NAME\" TEXT," + // 1: packageName
                "\"TIME_SPENT\" INTEGER);"); // 2: timeSpent
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WEEK_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WeekRecord entity) {
        stmt.clearBindings();
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(1, timestamp);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(2, packageName);
        }
 
        Long timeSpent = entity.getTimeSpent();
        if (timeSpent != null) {
            stmt.bindLong(3, timeSpent);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WeekRecord entity) {
        stmt.clearBindings();
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(1, timestamp);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(2, packageName);
        }
 
        Long timeSpent = entity.getTimeSpent();
        if (timeSpent != null) {
            stmt.bindLong(3, timeSpent);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public WeekRecord readEntity(Cursor cursor, int offset) {
        WeekRecord entity = new WeekRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // timestamp
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // packageName
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // timeSpent
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WeekRecord entity, int offset) {
        entity.setTimestamp(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPackageName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTimeSpent(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(WeekRecord entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(WeekRecord entity) {
        return null;
    }

    @Override
    public boolean hasKey(WeekRecord entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
